# Default values for ebpf-server.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.
 
# This will set the replicaset count more information can be found here: https://kubernetes.io/docs/concepts/workloads/controllers/replicaset/
replicaCount: 1

# This sets the container image more information can be found here: https://kubernetes.io/docs/concepts/containers/images/
image:
  repository: ghcr.io/aleyi17/ebpf_server
  # This sets the pull policy for images.
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

env:
  SERVER_PORT: "8080"
  DB_ADDRESS: "clickhouse:9000"
  DB_USER: "user"
  DB_PASSWORD: "password"
  DB_NAME: "audit"
  PROMETHEUS_PORT: "9090"

# This is for the secrets for pulling an image from a private repository more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
imagePullSecrets: []
# This is to override the chart name.
nameOverride: ""
fullnameOverride: ""

# This section builds out the service account more information can be found here: https://kubernetes.io/docs/concepts/security/service-accounts/
serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

# This is for setting Kubernetes Annotations to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
podAnnotations:
  prometheus.io/scrape: "true"
  prometheus.io/port: "9090"
  prometheus.io/path: "/metrics"

# This is for setting Kubernetes Labels to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
podLabels: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

# This is for setting up a service more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/
service:
  # This sets the service type more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
  type: ClusterIP
  # This sets the ports more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#field-spec-ports
  port: 8080


clickhouse:
  initdbScripts:
    my_init_script.sh: |
      #!/bin/bash
      echo "Initializing ClickHouse database as admin..."
      clickhouse-client --user=admin --password=${CLICKHOUSE_ADMIN_PASSWORD} --query "
        CREATE DATABASE IF NOT EXISTS audit;

        CREATE TABLE IF NOT EXISTS audit.tracing_events (
        pid UInt32,
        uid UInt32,
        gid UInt32,
        ppid UInt32,
        user_pid UInt32,
        user_ppid UInt32,
        cgroup_id UInt64,
        cgroup_name String,
        comm String,
        filename String,
        monotonic_ts_enter_ns UInt64,
        monotonic_ts_exit_ns UInt64,
        return_code Int64,
        latency_ns UInt64,
        event_type String,
        node_name String,
        user String,
        latency_ms Float64, 
        wall_time_ms Int64,
        wall_time_dt DateTime64(3),
        container_id String,
        container_image String,
        container_labels_json JSON

      )ENGINE = MergeTree()
      ORDER BY wall_time_ms;

      CREATE TABLE IF NOT EXISTS audit.network_events (
      pid UInt32,
      uid UInt32,
      gid UInt32,
      ppid UInt32,
      user_pid UInt32,
      user_ppid UInt32,
      cgroup_id UInt64,
      cgroup_name String,
      comm String,
      
      sa_family String,              
      saddr_ipv4 String,             
      daddr_ipv4 String,             
      sport String,                 
      dport String,                 
      saddr_ipv6 String,  
      daddr_ipv6 String,
      resolved_domain Nullable(String),
      monotonic_ts_enter_ns UInt64,
      monotonic_ts_exit_ns UInt64,
      return_code Int64,
      latency_ns UInt64,

      event_type String,
      node_name String,
      user String,

      latency_ms Float64, 
      wall_time_ms Int64,
      wall_time_dt DateTime64(3),

      container_id String,
      container_image String,
      container_labels_json JSON
      )ENGINE = MergeTree()
      ORDER BY wall_time_ms;

      CREATE TABLE IF NOT EXISTS audit.ptrace_events (
        pid UInt32,
        uid UInt32,
        gid UInt32,
        ppid UInt32,
        user_pid UInt32,
        user_ppid UInt32,
        cgroup_id UInt64,
        cgroup_name String,
        comm String,
        
        request Int64,
        target_pid Int64,
        addr UInt64,
        data UInt64,
        request_name String,
        monotonic_ts_enter_ns UInt64,
        monotonic_ts_exit_ns UInt64,
        return_code Int64,
        latency_ns UInt64,

        event_type String,
        node_name String,
        user String,

        latency_ms Float64, 
        wall_time_ms Int64,
        wall_time_dt DateTime64(3),

        container_id String,
        container_image String,
        container_labels_json JSON
      ) ENGINE = MergeTree()
      ORDER BY wall_time_ms;
      "
  auth: 
    username: admin
    password: password 
  replicaCount: 1
